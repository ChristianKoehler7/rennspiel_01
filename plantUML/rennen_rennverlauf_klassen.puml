@startuml
'skinparam linetype polyline
skinparam linetype ortho
'left to right direction
'top to bottom direction
skinparam nodesep 0
skinparam ranksep 0

class RennenController implements I_rennen_renn_verlauf {
'+ {static} String PATH_TO_FXML
'+ {static} String SCENE_NAME
'~ GridPane rennen_grid_root
'~ Label rennen_lb_streckenName
'~ VBox rennen_vbox_info
'~ Label rennen_lb_rennInfos
'~ Label rennen_lb_anzStreckenRunden
'~ Group rennen_group_strecke
'~ GridPane rennen_grid_spieler_info
'~ Button rennen_bn_rennenBeenden
'~ Button rennen_bn_weiter
'- double B_MAX_PIXEL
'- double H_MAX_PIXEL
'- Spieler aktiver_spieler
- Rennstrecke rennstrecke
'- ArrayList<Spieler> mitspieler
- ArrayList<Spieler> spieler
'- String[] farben
- HashMap<Spieler,String> zurordnung_spieler_farbe
'- URL url_to_stylesheet
- Umrechnung_grid_pixel umrechnung_grid_pixel
- HashMap<Spieler,Rennen_spieler_info_labels> zurordnung_spieler_infoLabels
'- Rennen_start_positionen_waehlen rennen_start_positionen_waehlen
'- HashMap<Spieler,Spieler_fahrverlauf> rueckgabe_von_rennverlauf_zuordnung_spieler_spielerFahrverlauf
+ void initialize()
+ void initialize_spieler_rennstrecke_mitspieler(Spieler,Rennstrecke,ArrayList<Spieler>)
'- void start_positionen_waehlen()
- void rennen_starten()
- void rennen_renn_verlauf_beendet(HashMap<Spieler,Spieler_fahrverlauf>)
'+ void rennen_bn_rennenBeenden_action(ActionEvent)
'+ void rennen_bn_weiter_action(ActionEvent)
}

class Rennen_renn_verlauf implements I_aufgabe_beendet {
- Umrechnung_grid_pixel umrechnung_grid_pixel
- Rennstrecke rennstrecke
- Group group_strecke
- ArrayList<Spieler> spieler_arrayList
- Label label_renn_infos
- HashMap<Spieler,String> zurordnung_spieler_farbe
- I_rennen_renn_verlauf i_rennen_renn_verlauf
'- String path_to_stylesheet
'- String CSS_STYLE_CLASS_RECHTECK_HINTERGRUND
'- String CSS_STYLE_CLASS_LINIE_GITTER
'- String CSS_STYLE_CLASS_LINIE_STRECKE
'- String CSS_STYLE_CLASS_LINIE_START
'- String CSS_STYLE_CLASS_POLYGON_STARTRICHTUNG
'- String CSS_STYLE_CLASS_POLYGON_RANDDURCHGANG
'- String CSS_STYLE_CLASS_CIRCLE_MOEGLICHE_POS
'- String CSS_STYLE_CLASS_CIRCLE_FAHR_POS
~ EventHandler<MouseEvent> mouseClickHandler_group
- int akt_spieler_index
- HashMap<Spieler,Rennen_spieler_info_labels> zurordnung_spieler_infoLabels
- HashMap<Spieler,Spieler_fahrverlauf> zuordnung_spieler_spielerFahrverlauf
- void start_next_zug()
- void zug_beendet()
- void rennen_beendet()
}

interface I_rennen_renn_verlauf {
~ void rennen_beendet(HashMap<Spieler,Spieler_fahrverlauf>)
}

interface I_aufgabe_beendet {
+ void aufgabe_beendet()
}

class Spieler_fahrverlauf {
- Spieler spieler
- String spieler_farbe
- HashMap<Spieler,Spieler_fahrverlauf> zuordnung_spieler_spielerFahrverlauf
- Umrechnung_grid_pixel umrechnung_grid_pixel
- Rennstrecke rennstrecke
- Group group_strecke
- I_aufgabe_beendet i_aufgabe_beendet
- Rennen_spieler_info_labels rennen_spieler_info_labels
- ArrayList<Fahrlinie> fahrlinien
- boolean is_crashed
'- Circle crash_fxNode
- boolean is_im_ziel
- int akt_renn_runde
- double akt_zeit
'- boolean startline_nach_start_verlassen
- ArrayList<Node> fx_nodes_moegliche_zuege
}

class Fahrlinie {
'- int strecke_breite_grid
'- int strecke_hoehe_grid
- int start_x_grid
- int start_y_grid
- int delta_x_grid
- int delta_y_grid
- Umrechnung_grid_pixel umrechnung_grid_pixel
- String farbe_spieler
- int end_x_grid
- int end_y_grid
- ArrayList<Linie> grid_linien
- ArrayList<Line> fx_lines
- Circle fx_end_node
'- String path_to_stylesheet
'- String CSS_STYLE_CLASS_CIRCLE_MOEGLICHE_POS
'- String CSS_STYLE_CLASS_LINE_MOEGLICHE_POS
'- String CSS_STYLE_CLASS_CIRCLE_FAHR_POS
'- String CSS_STYLE_CLASS_LINE_FAHR_LINIE
'- String CSS_STYLE_CLASS_LINE_UNSICHTBAR
}

/'
enum Fahrlinien_styles {
+  FAHRLINIE
+  MOEGLICHER_ZUG_MIT_LINIE
+  MOEGLICHER_ZUG_OHNE_LINIE
}
'/

'' Beziehungen
RennenController "1" *-- "1" Rennen_renn_verlauf
Rennen_renn_verlauf "1" *-- "1...4" Spieler_fahrverlauf
Spieler_fahrverlauf "1" *-- "0...n" Fahrlinie
Rennen_renn_verlauf *-- I_rennen_renn_verlauf
Spieler_fahrverlauf *-- I_aufgabe_beendet



/'
class Rennen_spieler_info_labels {
- Label lb_spieler_name
- Label lb_spieler_runde
- Label lb_spieler_zeit
- Label lb_spieler_status
- String spieler_farbe
- int anz_runden_der_strecke
- String path_to_stylesheet
- String CSS_STYLE_CLASS_LABEL_SMALL
}

class Umrechnung_grid_pixel {
- double B_RAND_GRID
- double H_RAND_GRID
+ double CLICK_TOLERANZ_GRID
- double B_MAX_PIXEL
- double H_MAX_PIXEL
- double B_STRECKE_PIXEL_MIT_RAND
- double H_STRECKE_PIXEL_MIT_RAND
- int B_STRECKE_GRID_OHNE_RAND
- int H_STRECKE_GRID_OHNE_RAND
- double B_STRECKE_GRID_MIT_RAND
- double H_STRECKE_GRID_MIT_RAND
+ double B_1GRID_IN_PIXEL
+ double H_1GRID_IN_PIXEL
}

class Rennstrecke {
- String name
- boolean is_standartstrecke
- int breite
- int hoehe
- ArrayList<Linie> streckenlinien
- Linie startlinie
- boolean is_startrichtung_nach_unten_oder_rechts
- int anz_runden
}

class Spieler {
- String name
- HashMap<String,Double> strecken_bestzeiten
}

class Rennen_strecke_zeichnen {
- Umrechnung_grid_pixel umrechnung_grid_pixel
- Rennstrecke rennstrecke
- Group group_strecke
- String path_to_stylesheet
- String CSS_STYLE_CLASS_RECHTECK_HINTERGRUND
- String CSS_STYLE_CLASS_LINIE_GITTER
- String CSS_STYLE_CLASS_LINIE_STRECKE
- String CSS_STYLE_CLASS_LINIE_START
- String CSS_STYLE_CLASS_POLYGON_STARTRICHTUNG
- String CSS_STYLE_CLASS_POLYGON_RANDDURCHGANG
- Rectangle rechteck_hintergrund
- ArrayList<Line> linien_gitter
- HashMap<Linie,Line> map_streckenlinie_fxline
- Line line_start
- ArrayList<Polygon> polygone_start_richtung
- ArrayList<Polygon> polygone_rand_durchgaenge
}

'' Beziehungen
RennenController *-- Umrechnung_grid_pixel
RennenController *-- Rennstrecke
RennenController "1" *-- "1 aktiver Spieler" Spieler
RennenController "1" *-- "0...3 Mitspieler" Spieler

RennenController "1" *-- "1...4" Rennen_spieler_info_labels
'/




@enduml